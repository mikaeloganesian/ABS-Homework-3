.data
first_msg: .asciz "\nВведите делимое: "    
second_msg: .asciz "\nВведите делитель: " 
error_msg: .asciz "\nОшибка! Делитель равен нулю."
result_msg: .asciz "\nРезультат: "
remainder_msg: .asciz "\nОстаток: "

.text
main:
    # Выводим строку для ввода делимого
    li  a7, 4                           # Код для вывода строки
    la  a0, first_msg                   # Загружаем адрес первой строки
    ecall                               # Вызов системного вызова

    # Получаем первое число (делимое)
    li  a7, 5                           # Код для ввода целого числа
    ecall                               # Вызов системного вызова
    mv  t1, a0                          # Сохраняем введенное число в t1

    # Выводим строку для ввода делителя
    li  a7, 4                           # Код для вывода строки
    la  a0, second_msg                  # Загружаем адрес второй строки
    ecall                               # Вызов системного вызова

    # Получаем второе число (делитель)
    li  a7, 5                           # Код для ввода целого числа
    ecall                               # Вызов системного вызова
    mv  t2, a0                          # Сохраняем введенное число в t2

    # Проверка делителя на ноль
    beqz t2, division_by_zero

    # Инициализация
    mv  t0, zero                        # Частное (t0) = 0
    mv  t3, t1                          # Остаток (t3) = делимое

division_loop:
    blt t3, t2, finish_division
    
    sub t3, t3, t2                      # t3 = t3 - t2
    addi t0, t0, 1                       # t0 = t0 + 1
    j division_loop
    
finish_division:
    # Выводим результат деления
    li  a7, 4                           # Код для вывода строки
    la  a0, result_msg                  # Загружаем адрес строки с результатом
    ecall                               # Вызов системного вызова

    mv  a0, t0                          # Загружаем частное в a0 для вывода
    li  a7, 1                           # Код для вывода целого числа
    ecall                               # Вызов системного вызова

    # Выводим остаток
    li  a7, 4                           # Код для вывода строки
    la  a0, remainder_msg                # Загружаем адрес строки с остатком
    ecall                               # Вызов системного вызова

    mv  a0, t3                          # Загружаем остаток в a0 для вывода
    li  a7, 1                           # Код для вывода целого числа
    ecall                               # Вызов системного вызова

    # Завершение программы
    li  a7, 10                          # Код для завершения программы
    ecall   

division_by_zero:
    li a7, 4
    la a0, error_msg
    ecall

    li a7, 10                           # Завершение программы
    ecall
